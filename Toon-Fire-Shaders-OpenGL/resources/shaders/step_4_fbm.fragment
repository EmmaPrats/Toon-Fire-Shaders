#version 330 core

in vec2 vTexCoord;
in vec3 vColor;

uniform float uTime;

out vec4 fragColor;

const int OCTAVES = 6;

//https://thebookofshaders.com/11/
float rand(vec2 coords)
{
    return fract(sin(dot(coords, vec2(12.9898, 78.233))) * 43758.5453123);
}

//https://thebookofshaders.com/11/
float noise(vec2 coord)
{
    vec2 i = floor(coord);
    vec2 f = fract(coord);

    float a = rand(i);
    float b = rand(i + vec2(1.0, 0.0));
    float c = rand(i + vec2(0.0, 1.0));
    float d = rand(i + vec2(1.0, 1.0));

    vec2 cubic = f * f * (3.0 - 2.0 * f);

    return mix(a, b, cubic.x) +
           (c - a) * cubic.y * (1.0 - cubic.x) +
           (d - b) * cubic.x * cubic.y;
}

//https://thebookofshaders.com/13/
float fbm(vec2 coord)
{
    float value = 0.0;
    float amplitude = 0.5;

    for (int i=0; i<OCTAVES; i++)
    {
        value += noise(coord) * amplitude;
        coord *= 2.0;
        amplitude *= 0.5;
    }

    return value;
}

void main()
{
    vec2 coord = vTexCoord * 8.0;
    vec2 fbmCoord = coord / 6.0;

    float fbmNoise = fbm(fbmCoord + vec2(0.0, -uTime * 2.0));

    fragColor = vec4(vec3(fbmNoise), 1.0);
}
